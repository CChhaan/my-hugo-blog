<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>性能优化 on 拾光博客 - 永浩</title><link>//localhost:1313/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><description>Recent content in 性能优化 on 拾光博客 - 永浩</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 17 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="//localhost:1313/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/rss.xml" rel="self" type="application/rss+xml"/><item><title>第五章 最佳实践</title><link>//localhost:1313/post/js-dom%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/05--%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate><guid>//localhost:1313/post/js-dom%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/05--%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>本章详细介绍了 JavaScript 在实际开发中的最佳实践，包括平稳退化、分离 JavaScript、向后兼容等方面，帮助读者提高代码质量和可维护性。</description></item><item><title>4.3节 Promise</title><link>//localhost:1313/post/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84js-%E4%B8%AD%E5%8D%B7/0405--%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD/</link><pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84js-%E4%B8%AD%E5%8D%B7/0405--%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD/</guid><description>本文详细介绍了 Web Worker 的基础概念、通信机制、运行环境、数据传递方式以及共享 Worker 的定义与创建，并对比了专用 Worker 和共享 Worker 的通信差异。</description></item><item><title>7.2 性能优化</title><link>//localhost:1313/post/vue3/0702-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><pubDate>Sat, 19 Apr 2025 00:00:00 +0000</pubDate><guid>//localhost:1313/post/vue3/0702-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid><description>本文主要介绍了 Vue 3 中的性能优化方法，包括页面加载优化、更新性能优化、通用优化等方面。通过这些优化方法，可以提高 Vue 应用的性能，提升用户体验。</description></item><item><title>4.3 垃圾回收</title><link>//localhost:1313/post/js%E7%BA%A2%E5%AE%9D%E4%B9%A6/0402-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link><pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate><guid>//localhost:1313/post/js%E7%BA%A2%E5%AE%9D%E4%B9%A6/0402-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid><description>本章详细介绍了 JavaScript 的垃圾回收机制，包括垃圾回收算法、内存管理、性能优化和内存泄漏等内容。通过学习本章，读者可以更好地理解 JavaScript 的内存管理机制，并掌握如何避免内存泄漏和提高程序性能。</description></item><item><title>第二章 HTML中的JS</title><link>//localhost:1313/post/js%E7%BA%A2%E5%AE%9D%E4%B9%A6/02-html%E4%B8%AD%E7%9A%84js/</link><pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate><guid>//localhost:1313/post/js%E7%BA%A2%E5%AE%9D%E4%B9%A6/02-html%E4%B8%AD%E7%9A%84js/</guid><description>本章详细介绍了 script 元素的使用方式，包括嵌入行内代码和引入外部文件，以及 defer 与 async 属性的使用，以优化脚本执行。同时，还介绍了动态加载脚本、文档模式、noscript 元素等内容。</description></item></channel></rss>